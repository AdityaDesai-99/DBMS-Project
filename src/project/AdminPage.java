/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import com.bulenkov.darcula.DarculaLaf;

import javax.lang.model.element.VariableElement;
import javax.security.auth.SubjectDomainCombiner;
import javax.swing.*;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;

/**
 *
 * @author desai
 */
public class AdminPage extends javax.swing.JFrame {

    public static String defaultPass = Utils.encrypt("changeme");

    /**
     * Creates new form AdminPage
     */
    public AdminPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectButtons = new javax.swing.ButtonGroup();
        adminLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        changePasswordButton = new javax.swing.JButton();
        selectSubject = new javax.swing.JRadioButton();
        selectTeacher = new javax.swing.JRadioButton();
        selectStudent = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        adminLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        adminLabel.setText("Admin");

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.setToolTipText("");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        changePasswordButton.setText("Change Password");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        selectButtons.add(selectSubject);
        selectSubject.setText("Subject");

        selectButtons.add(selectTeacher);
        selectTeacher.setText("Teacher");

        selectButtons.add(selectStudent);
        selectStudent.setSelected(true);
        selectStudent.setText("Student");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(changePasswordButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addComponent(adminLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectStudent)
                                    .addComponent(selectTeacher)
                                    .addComponent(selectSubject))))
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(adminLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectSubject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectStudent)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton)
                            .addComponent(changePasswordButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            // Adding new Subject
            if (selectSubject.isSelected()) {
                JPanel addSubject = new JPanel();
                addSubject.setLayout(new BoxLayout(addSubject, BoxLayout.Y_AXIS));

                JTextField courseID = new HintTextField("Enter Course ID");
                JTextField name = new HintTextField("Enter Course name");

                addSubject.add(courseID);
                addSubject.add(name);

                JOptionPane.showMessageDialog(rootPane, addSubject, "Enter Subject Details", JOptionPane.PLAIN_MESSAGE);
                String idInput = courseID.getText();
                String nameInput = name.getText();
                if (idInput.equals("") || nameInput.equals("")) {
                    Utils.showMessage(this, "Please enter proper details");
                    return;
                }

                if (idInput.length() > 5 || nameInput.length() > 20) {
                    Utils.showMessage(this, "Details cannot be exceed length limit");
                    return;
                }

                SQLutils sql = new SQLutils(this);
                sql.insert(new Subject(idInput, nameInput));
                sql.close();

            // Adding new Teacher
            } else if (selectTeacher.isSelected()) {
                JPanel addTeacher = new JPanel();
                addTeacher.setLayout(new BoxLayout(addTeacher, BoxLayout.Y_AXIS));

                JTextField teacherID = new HintTextField("Teacher ID");
                JTextField name = new HintTextField("Teacher name");
                JTextField tclass = new HintTextField("Teacher class");
                JTextField tsub = new HintTextField("Teacher subject");

                addTeacher.add(teacherID);
                addTeacher.add(name);
                addTeacher.add(tclass);
                addTeacher.add(tsub);


                JOptionPane.showMessageDialog(rootPane, addTeacher, "Enter Teacher Details", JOptionPane.OK_CANCEL_OPTION);
                String idInput = teacherID.getText();
                String nameInput = name.getText();
                String classInput = tclass.getText();
                String subInput = tsub.getText();
                if (idInput.equals("") || nameInput.equals("") || classInput.equals("") || subInput.equals("")) {
                    Utils.showMessage(this, "Please enter proper details");
                    return;
                }

                if (idInput.length() > 10 || nameInput.length() > 30) {
                    Utils.showMessage(this, "Details cannot be exceed length limit");
                    return;
                }

                SQLutils sql = new SQLutils(this);
                sql.insert(new Teacher(idInput, nameInput, defaultPass, classInput, subInput));
                sql.close();
            }

            // Adding a new Student
            else {
                JPanel addStudent = new JPanel();
                addStudent.setLayout(new BoxLayout(addStudent, BoxLayout.Y_AXIS));

                JTextField studentID = new HintTextField("Student ID");
                JTextField name = new HintTextField("Student name");
                JTextField tclass = new HintTextField("Student class");
                JTextField subjects = new HintTextField("Student subjects");

                addStudent.add(studentID);
                addStudent.add(name);
                addStudent.add(tclass);
                addStudent.add(subjects);

                JOptionPane.showMessageDialog(rootPane, addStudent, "Enter Student Details", JOptionPane.OK_CANCEL_OPTION);
                String idInput = studentID.getText();
                String nameInput = name.getText();
                String classInput = tclass.getText();
                String subjectInput = subjects.getText();
                if (idInput.equals("") || nameInput.equals("") || classInput.equals("") || subjectInput.equals("")) {
                    Utils.showMessage(this, "Please enter proper details");
                    return;
                }

                if (idInput.length() > 10 || nameInput.length() > 30 || classInput.length() > 5) {
                    Utils.showMessage(this, "Details cannot be exceed length limit");
                    return;
                }

                SQLutils sql = new SQLutils(this);
                sql.insert(new Student(idInput, defaultPass, nameInput, classInput));
                for(String x : subjectInput.split(" "))
                    sql.insert("insert into subjectstudent values (\'" + x + "\',\'" + idInput + "\')");
                sql.close();
            }
        }
        catch (Exception e) {
            Utils.showMessage(this, e.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (selectSubject.isSelected()) {
            SQLutils sql = new SQLutils(this);
            List<Map<String, Object>> resultSet = sql.selectQuery("subjectID, subName", Subject.table, "");
            sql.close();

            if (resultSet.isEmpty()) {
                Utils.showMessage(this, "No Subjects Added yet");
            }

            JTable subjectsTable = new JTable();
            subjectsTable.setRowSelectionAllowed(true);

            DefaultTableModel table = (DefaultTableModel) subjectsTable.getModel();
            table.addColumn("Course ID");
            table.addColumn("Course Name");

            for (Map row : resultSet) {
                table.addRow(new Vector<>(row.values()));
            }

            JPanel removeSubject = new JPanel();
            removeSubject.setPreferredSize( new Dimension( 900 , 900 ) );
            removeSubject.add(subjectsTable);
            JOptionPane.showMessageDialog(rootPane, subjectsTable, "Subject Details", JOptionPane.OK_CANCEL_OPTION);

            int selectedRow = subjectsTable.getSelectedRow();
            String val = subjectsTable.getValueAt(selectedRow, 0).toString();

            SQLutils sql1 = new SQLutils(this);
            sql1.delete(String.format("delete from %s where subjectID=\'%s\'", Subject.table, val));
            sql1.close();

            JOptionPane.showMessageDialog(this, "Subject Deleted!");
        }
        else if (selectTeacher.isSelected()) {
            SQLutils sql = new SQLutils(this);
            List<Map<String, Object>> resultSet = sql.selectQuery("teacherID, tName", Teacher.table, "");
            sql.close();

            if (resultSet.isEmpty()) {
                Utils.showMessage(this, "No Teachers Added yet");
            }

            JTable subjectsTable = new JTable();
            subjectsTable.setRowSelectionAllowed(true);

            DefaultTableModel table = (DefaultTableModel) subjectsTable.getModel();
            table.addColumn("Teacher ID");
            table.addColumn("Teacher Name");

            for (Map row : resultSet) {
                table.addRow(new Vector<>(row.values()));
            }

            JPanel removeSubject = new JPanel();
            removeSubject.setPreferredSize( new Dimension( 900 , 900 ) );
            removeSubject.add(subjectsTable);
            JOptionPane.showMessageDialog(rootPane, subjectsTable, "Teacher Details", JOptionPane.OK_CANCEL_OPTION);

            int selectedRow = subjectsTable.getSelectedRow();
            String val = subjectsTable.getValueAt(selectedRow, 0).toString();

            SQLutils sql1 = new SQLutils(this);
            sql1.delete(String.format("delete from %s where teacherID=\'%s\'", Teacher.table, val));
            sql1.close();

            JOptionPane.showMessageDialog(this, "Teacher Deleted!");
        }
        else {
            SQLutils sql = new SQLutils(this);
            List<Map<String, Object>> resultSet = sql.selectQuery("studentID, stName", Student.table, "");
            sql.close();

            if (resultSet.isEmpty()) {
                Utils.showMessage(this, "No Students Added yet");
            }

            JTable subjectsTable = new JTable();
            subjectsTable.setRowSelectionAllowed(true);

            DefaultTableModel table = (DefaultTableModel) subjectsTable.getModel();
            table.addColumn("Student ID");
            table.addColumn("Student Name");

            for (Map row : resultSet) {
                table.addRow(new Vector<>(row.values()));
            }

            JPanel removeSubject = new JPanel();
            removeSubject.setPreferredSize( new Dimension( 900 , 900 ) );
            removeSubject.add(subjectsTable);
            JOptionPane.showMessageDialog(rootPane, subjectsTable, "Student Details", JOptionPane.OK_CANCEL_OPTION);

            int selectedRow = subjectsTable.getSelectedRow();
            String val = subjectsTable.getValueAt(selectedRow, 0).toString();

            SQLutils sql1 = new SQLutils(this);
            sql1.delete(String.format("delete from %s where studentID=\'%s\'", Student.table, val));
            sql1.close();

            JOptionPane.showMessageDialog(this, "Student Deleted!");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        JPasswordField pf = new JPasswordField();
        int ok = JOptionPane.showConfirmDialog(rootPane, pf, "Enter new password!",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (ok != JOptionPane.OK_OPTION || pf.getText().equals(""))
            return;

        String password = new String(pf.getPassword());


        Properties credentials = new Properties();
        try {
            FileReader fileReader = new FileReader("login.properties");
            credentials.load(fileReader);
            credentials.setProperty("adminPassword", password);
            OutputStream out = new FileOutputStream("login.properties");
            credentials.store(out, "Changed admin password on " + new java.util.Date());

        } catch (FileNotFoundException e) {
            Utils.showMessage(this, "Properties file not found!\nAssuming default values!\n" + e.getMessage());
        } catch (IOException e) {
            Utils.showMessage(this, "IOException occurred!\n" + e.getMessage());
        }

    }//GEN-LAST:event_changePasswordButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Darcula look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            System.err.close();
            System.setErr(new PrintStream(new FileOutputStream("err.log")));
        } catch (IOException e) {
            e.printStackTrace();
        }

        // set laf to darcula
        try {
            UIManager.setLookAndFeel(new DarculaLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentLoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel adminLabel;
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton removeButton;
    private javax.swing.ButtonGroup selectButtons;
    private javax.swing.JRadioButton selectStudent;
    private javax.swing.JRadioButton selectSubject;
    private javax.swing.JRadioButton selectTeacher;
    // End of variables declaration//GEN-END:variables
}
